import { QueryResult } from "pg";
import { BaseService } from "../../../classes";
import {
  ICreateUserDTO,
  IGetUsersDTO,
  IResCreateUserDTO,
  IResDTO,
  IUser,
} from "./users.interfaces";
import * as bcrypt from "bcrypt";

export default class UsersService extends BaseService {
  hasPassword = async (password: string, value: number) => {
    return await bcrypt.hash(password, value);
  };

  getUsers = async (filters: any) => {
    try {
      const { login, status } = filters;
      const page = filters.page || 1;
      const limit = filters.limit || 10;
      const offset = page * limit - limit;
      let query: string;
      if (!login && !status) {
        query = `SELECT * FROM users u ORDER BY u.login ASC LIMIT ${limit} OFFSET ${offset}`;
      }
      if (login && !status) {
        query = `SELECT * FROM users u WHERE login ILIKE '%${login}%' ORDER BY u.login ASC LIMIT ${limit} OFFSET ${offset}`;
      } else if (!login && status) {
        query = `SELECT * FROM users u WHERE status ILIKE '%${status}%' ORDER BY u.login ASC LIMIT ${limit} OFFSET ${offset}`;
      } else if (login && status) {
        query = `SELECT * FROM users u WHERE login ILIKE '%${login}%' AND status ILIKE '%${status}%' ORDER BY u.login ASC LIMIT ${limit} OFFSET ${offset}`;
      }
      const res: QueryResult = await this.query(query);
      const users = res.rows;
      if (!users.length) return this.failDTO("–ß—É–≤–∞–∫, —É –º–∞—Å—Å–∏–≤–∞ –Ω–µ—Ç –¥–ª–∏–Ω—ãüßê");
      return this.okDTO(users, "–ö—Ä–∞—Å–∞–≤–∞, –≤–æ—Ç —Ç–≤–æ–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏");
    } catch (error) {
      console.log(error);
      return this.errorDTO("Error!!!ü§¨ 'CATCH' for getUsers");
    }
  };

  getUser = async (dto: IGetUsersDTO) => {
    const { id } = dto;
    try {
      let query: string;
      if (id) {
        query = `SELECT * FROM users WHERE id = ${id}`;
      }
      const res: QueryResult = await this.query(query);
      const user = res.rows[0];
      if (!user) {
        return this.failDTO(
          "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§® —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —è –Ω–µ –Ω–∞—à–µ–ª"
        );
      }
      return this.okDTO(user, "–ö—Ä–∞—Å–∞–≤–∞ –±—Ä–æ, –≤–æ—Ç —Ç–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
    } catch (error) {
      console.log(error);
      return this.errorDTO(`–û—Ç—Ä–∞–±–æ—Ç–∞–ª '—Åatch' —É getUser`);
    }
  };

  createUser = async (dto: ICreateUserDTO) => {
    const { login, password, role } = dto;
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let query = `SELECT * FROM users WHERE login = '${login}'`;
      const candidate = await (await this.query(query)).rows[0];
      if (candidate) return this.failDTO("–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å");
      // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const hasPassword = await this.hasPassword(password, 5);
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      query = `INSERT INTO users (login, password) VALUES ('${login}', '${hasPassword}') RETURNING *`;
      const user: IUser = await (await this.query(query)).rows[0];
      if (!user) return this.failDTO("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      // –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å
      query = `INSERT INTO users_roles (user_id, role_id) VALUES('${
        user.id
      }', ${role || 2}) RETURNING *`;
      const userRole = await (await this.query(query)).rows[0];
      if (!userRole) return this.failDTO("USER + ROLE -");
      user.role = role || 2;
      const resDto: IResCreateUserDTO = this.okDTO(
        user,
        "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –†–û–î–ò–õ–°–Ø ü•∞"
      );
      return resDto;
    } catch (error) {
      console.log(error);
      return this.errorDTO(`–û—Ç—Ä–∞–±–æ—Ç–∞–ª '—Åatch' —É createUser`);
    }
  };

  login = async (login: string, password: string) => {
    try {
      let query = `SELECT u.*, ur.role_id as role FROM users u LEFT JOIN users_roles ur ON u.id = ur.user_id WHERE login = '${login}'`;
      const user: IUser = await (await this.query(query)).rows[0];
      if (!user) return this.failDTO("–ù–µ–∞, –Ω–µ—Ç—É —Ç–∞–∫–æ–≥–æ");
      const comparePassword = bcrypt.compareSync(password, user.password);
      if (!comparePassword) return this.failDTO("–ù–µ –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å");
      const resDto: IResDTO<IUser> = this.okDTO(
        user,
        "–ß—ë—Ç–∫–æ, —Ç—ã –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É"
      );
      return resDto;
    } catch (error) {
      console.log(error);
      return this.errorDTO(`–û—Ç—Ä–∞–±–æ—Ç–∞–ª '—Åatch' —É login`);
    }
  };
}
